scala> def convertToUpper(x:String)=x.toUpperCase
convertToUpper: (x: String)String

scala> def stringOps(s:String,n:String=>String)={
     | if(s!=null)n(s)
     | else s
     | }
stringOps: (s: String, n: String => String)String


scala> stringOps("scala",convertToUpper)
res3: String = SCALA

scala> stringOps("scala",(x:String)=>x.toUpperCase)
res4: String = SCALA

scala> stringOps("scala",_.toUpperCase)
res9: String = SCALA

scala> stringOps("scala",_.reverse)
res13: String = alacs

High Order function:
----------------------
-----------Example 1--------------
scala> def simpleOps(x:Int,y:Int,f:(Int,Int)=>Int)={
     | val m=x+2
     | val n=y+2
     | val p=f(m,n)
     | p*2
     | }
simpleOps: (x: Int, y: Int, f: (Int, Int) => Int)Int

scala> def sum(a:Int,b:Int)=a + b
sum: (a: Int, b: Int)Int

scala> simpleOps(4,5,sum)
res14: Int = 26

scala> simpleOps(4,5,(a:Int,b:Int)=>a+b)
res15: Int = 26

scala> simpleOps(4,5,_+_)
res16: Int = 26

scala> simpleOps(4,5,_*_)
res17: Int = 84

scala> simpleOps(4,5,_-_)
res18: Int = -2

scala> simpleOps(4,5,_/_)
res19: Int = 0

scala> simpleOps(4,5,_>_)
                      ^
       error: type mismatch;
        found   : Boolean
        required: Int
//This fails but how can we make that it doesn't fail.
We can take the use of type parameter to do so.

------ Generic function---
scala> def identify[T](s:T)=s
identify: [T](s: T)T

scala> identify("ram")
res21: String = ram

scala> identify(10)
res22: Int = 10

scala> identify(true)
res23: Boolean = true

-------- Example 2---------
scala> def simpleOps[A,B](x:A,y:A,f:(A,A)=>B)=f(x,y)
simpleOps: [A, B](x: A, y: A, f: (A, A) => B)B

scala> simpleOps[Int,Int](2,4,_+_)
res25: Int = 6

scala> simpleOps[Int,Int](2,4,_*_)
res26: Int = 8

scala> simpleOps[Int,Int](2,4,_-_)
res27: Int = -2

scala> simpleOps[Int,Boolean](2,4,_>_)
res28: Boolean = false

scala> simpleOps[Int,Int](2,4,_>_)
                               ^
       error: type mismatch;
        found   : Boolean
        required: Int

scala> simpleOps[Double,Double](2,4,_/_)
res30: Double = 0.5

-------- Eample 3---------
scala> def tripleOp(a:Int,b:Int,c:Int,f:(Int,Int,Int)=>Int)=f(a,b,c)
tripleOp: (a: Int, b: Int, c: Int, f: (Int, Int, Int) => Int)Int

scala> tripleOp(2,3,4,_+_*_)
res34: Int = 14

scala> tripleOp(2,3,4,_*_*_)
res35: Int = 24